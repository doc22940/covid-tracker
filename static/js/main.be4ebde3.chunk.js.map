{"version":3,"sources":["components/Logo.js","components/TopBar.js","components/WorldMap.js","components/CaseItem.js","components/CaseList.js","helpers/api.js","helpers/util.js","views/Home.js","components/CountrySelect.js","components/MonthlyChartByCountry.js","components/MonthlyComparisonChart.js","views/Statistics.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","size","height","viewBox","width","fillRule","fill","d","useStyles","makeStyles","theme","root","marginBottom","flexGrow","logo","margin","spacing","header","color","display","alignItems","link","title","fontSize","breakpoints","only","TopBar","styles","className","AppBar","position","elevation","style","backgroundColor","Toolbar","to","Typography","variant","Button","component","RouterLink","href","icon","padding","stroke","cursor","outline","WorldMap","clickHandler","layerProps","onClick","world","item","card","borderRadius","cardContent","number","paddingLeft","confirmed","orange","active","blue","recovered","green","deaths","red","CaseItem","data","value","Grid","xs","Card","classNames","CardContent","start","delay","duration","separator","end","palette","primary","dark","CaseList","name","cases","container","map","key","getTimelineByCountry","code","URL","axios","get","createCaseDict","getMonthWiseCases","timeline","console","log","monthData","month","forEach","getMonth","Date","date","push","reduce","prev","current","createColumnChartOptions","country","months","split","monthlyCases","createSeries","caseType","series","colorByPoint","y","options","chart","type","subtitle","text","xAxis","yAxis","createChartOption","optionsData","filter","Home","useState","setCountry","setConfirmed","setActive","setRecovered","setDeaths","useEffect","getCasesByCountry","then","response","Container","marginTop","md","justify","Paper","target","attributes","option","marginRight","CountrySelect","countries","changeHandler","classes","Autocomplete","id","autoHighlight","getOptionLabel","renderOption","Fragment","renderInput","params","TextField","label","fullWidth","inputProps","onChange","MonthlyChartByCountry","setTimeline","selectedCountry","setSelectedCountry","selectedCountryCode","setSelectedCountryCode","direction","e","iso2","highcharts","Highcharts","comparisonContainer","MonthlyComparisonChart","compareCountryOne","setCompareCountryOne","compareCountryTwo","setCompareCountryTwo","compareCountryCodeOne","setCompareCountryCodeOne","compareCountryCodeTwo","setCompareCountryCodeTwo","compareCountryOneTimeline","setCompareCountryOneTimeline","compareCountryTwoTimeline","setCompareCountryTwoTimeline","compareCaseType","setCompareCaseType","data1","data2","textAlign","FormControl","InputLabel","Select","event","MenuItem","Statistics","setCountries","App","exact","path","Component","Boolean","window","location","hostname","match","library","add","fas","fab","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be4ebde3.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nfunction Logo(props) {\r\n    const { size } = props;\r\n    return (\r\n        <svg height={size} viewBox=\"0 0 60 42\" width={size} {...props}>\r\n            <g fillRule=\"nonzero\" fill=\"none\">\r\n                <path\r\n                    d=\"M11.981 29.007A12.462 12.462 0 014.8 26.641 10.688 10.688 0 010 18v-5a4 4 0 014-4h6a1 1 0 010 2H4a2 2 0 00-2 2v5a8.718 8.718 0 003.962 7.011 9.864 9.864 0 008.875 1.523 1 1 0 11.657 1.888c-1.13.39-2.318.588-3.513.585zM48.021 29.013a10.476 10.476 0 01-5.356-1.444 1 1 0 011.016-1.723 9.325 9.325 0 009.435-.247A9.061 9.061 0 0058 18v-5a2 2 0 00-2-2h-6a1 1 0 010-2h6a4 4 0 014 4v5a11.056 11.056 0 01-5.892 9.336 12.3 12.3 0 01-6.087 1.677z\"\r\n                    fill=\"#338f7c\"\r\n                />\r\n                <path\r\n                    d=\"M50 10v11c.083 10.655-7.867 19.665-18.45 20.91-1.03.12-2.07.12-3.1 0C17.867 40.665 9.917 31.655 10 21V10l4-.01a16.764 16.764 0 0012.9-6.51 3.985 3.985 0 016.19-.01A16.778 16.778 0 0046 9.99z\"\r\n                    fill=\"#26b899\"\r\n                />\r\n                <path\r\n                    d=\"M50 10v2l-4-.01a16.778 16.778 0 01-12.91-6.52 3.985 3.985 0 00-6.19.01A16.764 16.764 0 0114 11.99L10 12v-2a2.006 2.006 0 012-2h1.51A13.331 13.331 0 0023.8 2.95a7.99 7.99 0 0112.4 0A13.331 13.331 0 0046.49 8H48a2.006 2.006 0 012 2z\"\r\n                    fill=\"#80cbb7\"\r\n                />\r\n                <g fill=\"#149f84\">\r\n                    <path d=\"M30 25.988a44.625 44.625 0 01-13.3-2.033 1 1 0 01.594-1.91 42.507 42.507 0 0025.406 0 1 1 0 01.594 1.91A44.625 44.625 0 0130 25.988zM30 18.994a85.637 85.637 0 01-13.154-1.006 1 1 0 01.308-1.976 84.471 84.471 0 0025.692 0 1 1 0 11.308 1.976A85.637 85.637 0 0130 18.994zM30 34.007a31.037 31.037 0 01-13.431-3.1 1 1 0 11.862-1.8 28.632 28.632 0 0025.138 0 1 1 0 11.862 1.8A31.037 31.037 0 0130 34.007z\" />\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Typography, Toolbar, Button } from '@material-ui/core';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport Logo from './Logo';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: '1rem',\r\n        flexGrow: 1,\r\n    },\r\n\r\n    logo: {\r\n        margin: theme.spacing(0, 2, 0, 2),\r\n    },\r\n    header: {\r\n        color: '#26b899',\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    link: {\r\n        color: '#26b899',\r\n    },\r\n    title: {\r\n        fontSize: '1.5rem',\r\n        [theme.breakpoints.only('xs')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction TopBar() {\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <AppBar\r\n                position=\"static\"\r\n                elevation={1}\r\n                style={{ backgroundColor: '#fff', color: '#000' }}\r\n            >\r\n                <Toolbar>\r\n                    <div className={styles.header}>\r\n                        <RouterLink to=\"/\">\r\n                            <Logo size={48} className={styles.logo} />\r\n                        </RouterLink>\r\n                        <Typography variant=\"span\" className={styles.title}>\r\n                            Covid-19 Tracker\r\n                        </Typography>\r\n                    </div>\r\n                    <Button\r\n                        className={styles.link}\r\n                        component={RouterLink}\r\n                        to=\"/\"\r\n                    >\r\n                        Home\r\n                    </Button>\r\n                    <Button\r\n                        className={styles.link}\r\n                        component={RouterLink}\r\n                        to=\"/stats\"\r\n                    >\r\n                        Statistics\r\n                    </Button>\r\n                    <Button\r\n                        href=\"https://github.com/yogiindia/covid-tracker\"\r\n                        className={styles.link}\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={['fab', 'github-alt']}\r\n                            size=\"lg\"\r\n                        />\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { VectorMap } from '@south-paw/react-vector-maps';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport world from '../helpers/world.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n        margin: '0 auto',\r\n\r\n        '& > svg': {\r\n            stroke: '#fff',\r\n            '& > path': {\r\n                fill: '#EE2677',\r\n                cursor: 'pointer',\r\n                outline: 'none',\r\n\r\n                // When a layer is hovered\r\n                '&:hover': {\r\n                    fill: '#EBB3A9',\r\n                },\r\n\r\n                // When a layer is focused.\r\n                '&:focus': {\r\n                    fill: '#E86252',\r\n                },\r\n            },\r\n        },\r\n        [theme.breakpoints.only('lg')]: {\r\n            width: '712px',\r\n            padding: theme.spacing(5),\r\n        },\r\n    },\r\n}));\r\n\r\nfunction WorldMap({ clickHandler }) {\r\n    const styles = useStyles();\r\n\r\n    const layerProps = {\r\n        onClick: clickHandler,\r\n    };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <VectorMap {...world} layerProps={layerProps} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WorldMap;\r\n","import React from 'react';\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue, orange, green, red } from '@material-ui/core/colors';\r\nimport classNames from 'classnames';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    card: {\r\n        display: 'flex',\r\n        '& svg': {\r\n            margin: theme.spacing(1, 1, 0, 1),\r\n            padding: theme.spacing(2),\r\n            borderRadius: '50%',\r\n            fontSize: '2.15rem',\r\n            width: '1em !important',\r\n            [theme.breakpoints.only('md')]: {\r\n                fontSize: '1.5rem',\r\n            },\r\n        },\r\n    },\r\n    cardContent: {\r\n        [theme.breakpoints.only('md')]: {\r\n            padding: theme.spacing(1),\r\n        },\r\n    },\r\n    number: {\r\n        paddingLeft: '0',\r\n        '& h4': {\r\n            [theme.breakpoints.only('md')]: {\r\n                fontSize: '1.5rem',\r\n            },\r\n        },\r\n    },\r\n    confirmed: {\r\n        backgroundColor: orange[900],\r\n        '& span,h4': {\r\n            color: orange[100],\r\n        },\r\n        '& svg': {\r\n            color: orange[900],\r\n            backgroundColor: orange[100],\r\n        },\r\n    },\r\n    active: {\r\n        backgroundColor: blue[900],\r\n        '& span,h4': {\r\n            color: blue[100],\r\n        },\r\n        '& svg': {\r\n            color: blue[900],\r\n            backgroundColor: blue[100],\r\n        },\r\n    },\r\n    recovered: {\r\n        backgroundColor: green[900],\r\n        '& span,h4': {\r\n            color: green[100],\r\n        },\r\n        '& svg': {\r\n            color: green[900],\r\n            backgroundColor: green[100],\r\n        },\r\n    },\r\n    deaths: {\r\n        backgroundColor: red[900],\r\n        '& span,h4': {\r\n            color: red[100],\r\n        },\r\n        '& svg': {\r\n            color: red[900],\r\n            backgroundColor: red[100],\r\n        },\r\n    },\r\n}));\r\n\r\nfunction CaseItem({ data }) {\r\n    const styles = useStyles();\r\n    const { title, icon, value } = data;\r\n\r\n    return (\r\n        <Grid item xs={12} className={styles.item}>\r\n            <Card\r\n                elevation={0}\r\n                className={classNames(styles.card, styles[title])}\r\n            >\r\n                <CardContent className={styles.cardContent}>\r\n                    <FontAwesomeIcon icon={icon} />\r\n                </CardContent>\r\n                <CardContent\r\n                    className={classNames(styles.cardContent, styles.number)}\r\n                >\r\n                    <Typography variant=\"overline\">{title}</Typography>\r\n                    <Typography variant=\"h4\">\r\n                        <CountUp\r\n                            start={0}\r\n                            delay={0}\r\n                            duration={1}\r\n                            separator=\",\"\r\n                            end={value}\r\n                        />\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default CaseItem;\r\n","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CaseItem from './CaseItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    header: {\r\n        color: theme.palette.primary.dark,\r\n    },\r\n}));\r\n\r\nfunction CaseList(props) {\r\n    const styles = useStyles();\r\n    const { name, cases } = props;\r\n\r\n    // console.log(props);\r\n    return (\r\n        <Grid container>\r\n            <Grid item className={styles.item}>\r\n                <Typography variant=\"h4\" className={styles.header}>\r\n                    {name}\r\n                </Typography>\r\n            </Grid>\r\n            {cases.map((data) => (\r\n                <CaseItem data={data} key={data.title} />\r\n            ))}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default CaseList;\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = `https://coronavirus-19-api.herokuapp.com`;\r\nconst BASE_URL_2 = `https://covid19.mathdro.id/api`;\r\n\r\nexport const getCasesByCountry = (country) => {\r\n    return axios.get(`${BASE_URL}/countries/${country}`);\r\n};\r\n\r\nexport const getCountryList = () => axios.get(`${BASE_URL_2}/countries`);\r\n\r\nexport const getDailyData = () => axios.get(`${BASE_URL_2}/daily`);\r\n\r\nexport const getTimelineByCountry = (code) => {\r\n    let URL = `https://corona-api.com/timeline`;\r\n    if (code) {\r\n        URL = `https://corona-api.com/countries/${code}`;\r\n    }\r\n    return axios.get(URL);\r\n};\r\n","import { getMonth } from 'date-fns';\r\n\r\nexport const createCaseDict = (data) => {\r\n    const { active, confirmed, deaths, recovered } = data;\r\n\r\n    return [\r\n        {\r\n            title: 'confirmed',\r\n            icon: 'users',\r\n            value: confirmed,\r\n        },\r\n        {\r\n            title: 'active',\r\n            icon: 'head-side-mask',\r\n            value: active,\r\n        },\r\n        {\r\n            title: 'recovered',\r\n            icon: 'smile',\r\n            value: recovered,\r\n        },\r\n        {\r\n            title: 'deaths',\r\n            icon: 'bed',\r\n            value: deaths,\r\n        },\r\n    ];\r\n};\r\n\r\nexport const getMonthWiseCases = (timeline) => {\r\n    if (!timeline) {\r\n        return null;\r\n    }\r\n\r\n    console.log(timeline);\r\n\r\n    let monthData = {};\r\n\r\n    timeline.forEach((item) => {\r\n        const month = getMonth(new Date(item.date));\r\n\r\n        if (!monthData[month]) {\r\n            monthData[month] = [item];\r\n        } else {\r\n            monthData[month].push(item);\r\n        }\r\n    });\r\n\r\n    console.log(monthData);\r\n\r\n    for (let month in monthData) {\r\n        monthData[month] = monthData[month].reduce((prev, current) =>\r\n            prev.date > current.date ? prev : current\r\n        );\r\n    }\r\n\r\n    console.log(monthData);\r\n\r\n    return monthData;\r\n};\r\n\r\nexport const createColumnChartOptions = (timeline, country) => {\r\n    const months = 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sept,Oct,Nov,Dec'.split(\r\n        ','\r\n    );\r\n\r\n    const monthlyCases = getMonthWiseCases(timeline);\r\n\r\n    const createSeries = (monthlyCases, caseType, color) => {\r\n        const series = { name: caseType, color, colorByPoint: false, data: [] };\r\n\r\n        for (let key in monthlyCases) {\r\n            series.data.push({\r\n                name: months[key],\r\n                y: monthlyCases[key][caseType],\r\n            });\r\n        }\r\n\r\n        return series;\r\n    };\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'column',\r\n        },\r\n        subtitle: {\r\n            text: 'Monthly Covid-19 Cases',\r\n        },\r\n        title: {\r\n            text: country,\r\n        },\r\n        xAxis: {\r\n            type: 'category',\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Corona Cases',\r\n            },\r\n        },\r\n        series: [\r\n            createSeries(monthlyCases, 'confirmed', '#f39c12'),\r\n            createSeries(monthlyCases, 'active', '#2980b9'),\r\n            createSeries(monthlyCases, 'recovered', '#27ae60'),\r\n            createSeries(monthlyCases, 'deaths', '#e74c3c'),\r\n        ],\r\n    };\r\n\r\n    console.log(options);\r\n    return options;\r\n};\r\n\r\nexport const createChartOption = (optionsData) => {\r\n    const months = 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sept,Oct,Nov,Dec'.split(\r\n        ','\r\n    );\r\n\r\n    let series = optionsData.data.map((item) => {\r\n        if (!item.timeline) {\r\n            return null;\r\n        }\r\n\r\n        const cases = getMonthWiseCases(item.timeline);\r\n\r\n        const series = {\r\n            name: item.country,\r\n            // color: item.color,\r\n            colorByPoint: false,\r\n            data: [],\r\n        };\r\n\r\n        for (let key in cases) {\r\n            series.data.push({\r\n                name: months[key],\r\n                y: cases[key][optionsData.caseType],\r\n            });\r\n        }\r\n\r\n        return series;\r\n    });\r\n\r\n    series = series.filter((item) => !!item);\r\n\r\n    const options = {\r\n        chart: {\r\n            type: optionsData.type,\r\n        },\r\n        subtitle: {\r\n            text: 'Monthly Covid-19 Cases',\r\n        },\r\n        title: {\r\n            text: 'Covid-19 Cases comparison',\r\n        },\r\n        xAxis: {\r\n            type: 'category',\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Corona Cases',\r\n            },\r\n        },\r\n        series,\r\n    };\r\n\r\n    return options;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container, Grid, Paper } from '@material-ui/core';\r\n\r\nimport WorldMap from '../components/WorldMap';\r\nimport CaseList from '../components/CaseList';\r\n\r\nimport { getCasesByCountry } from '../helpers/api';\r\nimport { createCaseDict } from '../helpers/util';\r\n\r\nfunction Home() {\r\n    const [country, setCountry] = useState('World');\r\n    const [confirmed, setConfirmed] = useState(0);\r\n    const [active, setActive] = useState(0);\r\n    const [recovered, setRecovered] = useState(0);\r\n    const [deaths, setDeaths] = useState(0);\r\n\r\n    const countryHandler = ({ target }) =>\r\n        setCountry(target.attributes.name.value);\r\n\r\n    useEffect(() => {\r\n        getCasesByCountry(country).then((response) => {\r\n            const { data } = response;\r\n            setConfirmed(data.cases ? data.cases : 0);\r\n            setActive(data.active ? data.active : 0);\r\n            setRecovered(data.recovered ? data.recovered : 0);\r\n            setDeaths(data.deaths ? data.deaths : 0);\r\n        });\r\n    }, [country]);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Grid container spacing={2} style={{ marginTop: '1.5rem' }}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <Grid container justify=\"center\">\r\n                            <Grid item component={Paper} xs={12} elevation={0}>\r\n                                <WorldMap clickHandler={countryHandler} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={3}>\r\n                        <CaseList\r\n                            name={country}\r\n                            cases={createCaseDict({\r\n                                confirmed,\r\n                                active,\r\n                                deaths,\r\n                                recovered,\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","/* eslint-disable no-use-before-define */\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    option: {\r\n        fontSize: 15,\r\n        '& > span': {\r\n            marginRight: 10,\r\n            fontSize: 18,\r\n        },\r\n    },\r\n});\r\n\r\nexport default function CountrySelect({ countries, changeHandler }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"country-select\"\r\n            style={{ width: 300 }}\r\n            options={countries}\r\n            classes={{\r\n                option: classes.option,\r\n            }}\r\n            autoHighlight\r\n            getOptionLabel={(option) => option.name}\r\n            renderOption={(option) => (\r\n                <React.Fragment>{option.name}</React.Fragment>\r\n            )}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Choose a country\"\r\n                    variant=\"outlined\"\r\n                    fullWidth={true}\r\n                    inputProps={{\r\n                        ...params.inputProps,\r\n                    }}\r\n                />\r\n            )}\r\n            onChange={changeHandler}\r\n        />\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport CountrySelect from './CountrySelect';\r\nimport { getTimelineByCountry } from '../helpers/api';\r\nimport { createColumnChartOptions } from '../helpers/util';\r\n\r\nfunction MonthlyChartByCountry({ countries }) {\r\n    const [timeline, setTimeline] = useState(null);\r\n    const [selectedCountry, setSelectedCountry] = useState('Global');\r\n    const [selectedCountryCode, setSelectedCountryCode] = useState('');\r\n\r\n    useEffect(() => {\r\n        getTimelineByCountry(selectedCountryCode).then((response) => {\r\n            const { data } = response;\r\n            setTimeline(data.data.timeline || data.data);\r\n        });\r\n    }, [selectedCountryCode]);\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-end\"\r\n            alignItems=\"center\"\r\n            component={Paper}\r\n            elevation={0}\r\n        >\r\n            <Grid item xs={12}>\r\n                <Grid container direction=\"column\" justify=\"center\">\r\n                    <Grid item xs={12} style={{ margin: '1rem' }}>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <CountrySelect\r\n                                    countries={countries}\r\n                                    changeHandler={(e, value) => {\r\n                                        setSelectedCountry(\r\n                                            value ? value.name : 'Global'\r\n                                        );\r\n                                        setSelectedCountryCode(\r\n                                            value ? value.iso2 : ''\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <HighchartsReact\r\n                            highcharts={Highcharts}\r\n                            options={createColumnChartOptions(\r\n                                timeline,\r\n                                selectedCountry\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default MonthlyChartByCountry;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CountrySelect from '../components/CountrySelect';\r\nimport { getTimelineByCountry } from '../helpers/api';\r\nimport { createChartOption } from '../helpers/util';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    comparisonContainer: {\r\n        '&>div': {\r\n            marginBottom: '1rem',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction MonthlyComparisonChart({ countries }) {\r\n    const [compareCountryOne, setCompareCountryOne] = useState('');\r\n    const [compareCountryTwo, setCompareCountryTwo] = useState('');\r\n    const [compareCountryCodeOne, setCompareCountryCodeOne] = useState('');\r\n    const [compareCountryCodeTwo, setCompareCountryCodeTwo] = useState('');\r\n    const [compareCountryOneTimeline, setCompareCountryOneTimeline] = useState(\r\n        null\r\n    );\r\n    const [compareCountryTwoTimeline, setCompareCountryTwoTimeline] = useState(\r\n        null\r\n    );\r\n    const [compareCaseType, setCompareCaseType] = useState('confirmed');\r\n\r\n    const styles = useStyles();\r\n    useEffect(() => {\r\n        if (!compareCountryCodeOne) {\r\n            return;\r\n        }\r\n        getTimelineByCountry(compareCountryCodeOne).then((response) => {\r\n            const { data } = response;\r\n            setCompareCountryOneTimeline(data.data.timeline || data.data);\r\n        });\r\n    }, [compareCountryCodeOne]);\r\n\r\n    useEffect(() => {\r\n        if (!compareCountryCodeTwo) {\r\n            return;\r\n        }\r\n\r\n        getTimelineByCountry(compareCountryCodeTwo).then((response) => {\r\n            const { data } = response;\r\n            setCompareCountryTwoTimeline(data.data.timeline || data.data);\r\n        });\r\n    }, [compareCountryCodeTwo]);\r\n\r\n    const data1 = {\r\n        country: compareCountryOne,\r\n        timeline: compareCountryOneTimeline,\r\n    };\r\n    const data2 = {\r\n        country: compareCountryTwo,\r\n        timeline: compareCountryTwoTimeline,\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            component={Paper}\r\n            elevation={0}\r\n            style={{ marginTop: ' 2rem' }}\r\n        >\r\n            <Grid item xs={12}>\r\n                <Grid container direction=\"column\" justify=\"center\">\r\n                    <Grid\r\n                        item\r\n                        xs={12}\r\n                        style={{ margin: '1rem', textAlign: 'center' }}\r\n                    >\r\n                        <Typography variant=\"h5\">\r\n                            Compare Country Cases By Month\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} style={{ margin: '1rem' }}>\r\n                        <Grid\r\n                            container\r\n                            justify=\"space-between\"\r\n                            className={styles.comparisonContainer}\r\n                        >\r\n                            <Grid item>\r\n                                <CountrySelect\r\n                                    countries={countries}\r\n                                    changeHandler={(e, value) => {\r\n                                        setCompareCountryOne(\r\n                                            value ? value.name : ''\r\n                                        );\r\n                                        setCompareCountryCodeOne(\r\n                                            value ? value.iso2 : ''\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <FormControl\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: '300px' }}\r\n                                >\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Case Type\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        label=\"Case Type\"\r\n                                        value={compareCaseType}\r\n                                        onChange={(event) =>\r\n                                            setCompareCaseType(\r\n                                                event.target.value\r\n                                            )\r\n                                        }\r\n                                    >\r\n                                        <MenuItem value=\"confirmed\">\r\n                                            Confirmed\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"active\">\r\n                                            Active\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"deaths\">\r\n                                            Deaths\r\n                                        </MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <CountrySelect\r\n                                    countries={countries}\r\n                                    changeHandler={(e, value) => {\r\n                                        setCompareCountryTwo(\r\n                                            value ? value.name : ''\r\n                                        );\r\n                                        setCompareCountryCodeTwo(\r\n                                            value ? value.iso2 : ''\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <HighchartsReact\r\n                            highcharts={Highcharts}\r\n                            options={createChartOption({\r\n                                type: 'line',\r\n                                caseType: compareCaseType,\r\n                                data: [data1, data2],\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default MonthlyComparisonChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport MonthlyChartByCountry from '../components/MonthlyChartByCountry';\r\nimport MonthlyComparisonChart from '../components/MonthlyComparisonChart';\r\nimport { getCountryList } from '../helpers/api';\r\n\r\nfunction Statistics() {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getCountryList().then((response) => {\r\n            console.log(response.data.countries);\r\n            setCountries(\r\n                response.data.countries.filter((country) => country.iso2)\r\n            );\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <MonthlyChartByCountry countries={countries} />\r\n            <MonthlyComparisonChart countries={countries} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport TopBar from './components/TopBar';\nimport Home from './views/Home';\n\nimport './App.css';\nimport Statistics from './views/Statistics';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <TopBar />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home}></Route>\n                        <Route\n                            exact\n                            path=\"/stats\"\n                            component={Statistics}\n                        ></Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\n\r\nlibrary.add(fas, fab);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}